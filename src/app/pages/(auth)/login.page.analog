<script lang="ts">
  import { inject, signal, DestroyRef } from '@angular/core';
  import { takeUntilDestroyed } from '@angular/core/rxjs-interop'
  import { tap } from 'rxjs';
  import { AuthService } '../../services/';
  import LoginForm from '../../components/auth/login-form.analog';

  defineMetadata({
    providers: [AuthService],
    imports: [LoginForm]
  })

  const authService = inject(AuthService);
  const destroyRef = inject(DestroyRef);
  const loading = signal(false);

  const login = (credentials: { username: string; password: string }) => {
    loading.set(true);
    authService.login(credentials).
      pipe(
        takeUntilDestroyed(destroyRef),
        tap(() => loading.set(false)))
      .subscribe()
  }

  onInit(() => {
    console.log('Login init')
  })

  onDestroy(() => {
    console.log('Login destroy')
  })
</script>

<template>
  <div>
  @if(!loading()) {
    <LoginForm (onSubmitForm)="login($event)" />
  } @else {
    <div>loading</div>
    }
  </div>
</template>
